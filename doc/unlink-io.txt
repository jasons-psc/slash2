09/24/2014
----------

Patches used to support I/O after an unlink.

Index: pfl/fs.h
===================================================================
--- pfl/fs.h	(revision 24433)
+++ pfl/fs.h	(working copy)
@@ -162,7 +162,8 @@
 #define	PSCFS_SETATTRF_CTIME		(1 <<  6)	/* utimes */
 #define	PSCFS_SETATTRF_ATIME_NOW	(1 <<  7)	/* utimes */
 #define	PSCFS_SETATTRF_MTIME_NOW	(1 <<  8)	/* utimes */
-#define	_PSCFS_SETATTRF_LAST		(1 <<  9)
+#define PSCFS_SETATTRF_FLUSH            (1 <<  9)       /* flush dirty attributes */
+#define	_PSCFS_SETATTRF_LAST		(1 <<  10)
 
 #define PSCFS_SETATTRF_ALL		(~0)
 
Index: slash_nara/include/slashrpc.h
===================================================================
--- slash_nara/include/slashrpc.h	(revision 24433)
+++ slash_nara/include/slashrpc.h	(working copy)
@@ -175,19 +175,20 @@
 	SRMT_STATFS,				/* 39: statvfs(2) */
 	SRMT_SYMLINK,				/* 40: symlink(2) */
 	SRMT_UNLINK,				/* 41: unlink(2) */
-	SRMT_WRITE,				/* 42: write(2) */
-	SRMT_LISTXATTR,				/* 43: listxattr(2) */
-	SRMT_SETXATTR,				/* 44: setxattr(2) */
-	SRMT_GETXATTR,				/* 45: getxattr(2) */
-	SRMT_REMOVEXATTR,			/* 46: removexattr(2) */
+	SRMT_REMOVE,				/* 42: unlink(2) afermath */
+	SRMT_WRITE,				/* 43: write(2) */
+	SRMT_LISTXATTR,				/* 44: listxattr(2) */
+	SRMT_SETXATTR,				/* 45: setxattr(2) */
+	SRMT_GETXATTR,				/* 46: getxattr(2) */
+	SRMT_REMOVEXATTR,			/* 47: removexattr(2) */
 
 	/* import/export */
-	SRMT_IMPORT,				/* 47: import */
+	SRMT_IMPORT,				/* 48: import */
 
-	SRMT_PRECLAIM,				/* 48: partial file reclaim */
-	SRMT_BATCH_RQ,				/* 49: async batch request */
-	SRMT_BATCH_RP,				/* 50: async batch reply */
-	SRMT_CTL				/* 51: generic control */
+	SRMT_PRECLAIM,				/* 49: partial file reclaim */
+	SRMT_BATCH_RQ,				/* 50: async batch request */
+	SRMT_BATCH_RP,				/* 51: async batch reply */
+	SRMT_CTL				/* 52: generic control */
 };
 
 /* ----------------------------- BEGIN MESSAGES ----------------------------- */
@@ -992,6 +993,7 @@
 struct srm_unlink_req {
 	slfid_t			pfid;		/* parent dir */
 	char			name[SL_NAME_MAX + 1];
+	int			flag;		/* 0: normal, 1: name only */
 } __packed;
 
 struct srm_unlink_rep {
@@ -1001,6 +1003,15 @@
 	 int32_t		rc;
 } __packed;
 
+struct srm_remove_req {
+	struct slash_fidgen	fg;		/* file to remove */
+} __packed;
+
+struct srm_remove_rep {
+	 int32_t		rc;
+	 int32_t		_pad;
+} __packed;
+
 struct srm_listxattr_req {
 	struct slash_fidgen	fg;
 	uint32_t		size;
Index: slash_nara/include/sltypes.h
===================================================================
--- slash_nara/include/sltypes.h	(revision 24433)
+++ slash_nara/include/sltypes.h	(working copy)
@@ -110,5 +110,6 @@
 
 #define	SLASH2_IGNORE_MTIME	0x400000
 #define	SLASH2_IGNORE_CTIME	0x800000
+#define	SLASH2_KEEP_STORAGE	0x0100000
 
 #endif /* _SL_TYPES_H_ */
Index: slash_nara/slashd/ino_compat.c
===================================================================
--- slash_nara/slashd/ino_compat.c	(revision 24433)
+++ slash_nara/slashd/ino_compat.c	(working copy)
@@ -155,14 +155,14 @@
 		PFL_GOTOERR(out, rc);
 
 	mdsio_unlink(vfsid, mds_tmpdir_inum[vfsid], NULL, fn,
-	    &rootcreds, NULL, NULL);
+	    &rootcreds, NULL, NULL, 0);
 
  out:
 	if (h)
 		mdsio_release(vfsid, &rootcreds, h);
 	if (rc) {
 		mdsio_unlink(vfsid, mds_tmpdir_inum[vfsid], NULL, fn,
-		    &rootcreds, NULL, NULL);
+		    &rootcreds, NULL, NULL, 0);
 		DEBUG_INOH(PLL_ERROR, ih, "error updating old inode "
 		    "rc=%d", rc);
 	}
@@ -235,14 +235,14 @@
 		PFL_GOTOERR(out, *rc);
 
 	mdsio_unlink(vfsid, mds_tmpdir_inum[vfsid], NULL, fn,
-	    &rootcreds, NULL, NULL);
+	    &rootcreds, NULL, NULL, 0);
 
  out:
 	if (h)
 		mdsio_release(vfsid, &rootcreds, h);
 	if (*rc)
 		mdsio_unlink(vfsid, mds_tmpdir_inum[vfsid], NULL, fn,
-		    &rootcreds, NULL, NULL);
+		    &rootcreds, NULL, NULL, 0);
 	inoh_2_mfh(ih) = th;
 	return (exists);
 }
Index: slash_nara/slashd/journal_mds.h
===================================================================
--- slash_nara/slashd/journal_mds.h	(revision 24433)
+++ slash_nara/slashd/journal_mds.h	(working copy)
@@ -224,7 +224,7 @@
 void	mdslog_bmap_repls(void *, uint64_t, int);
 void	mdslog_ino_repls(void *, uint64_t, int);
 void	mdslog_namespace(int, uint64_t, uint64_t, uint64_t,
-	    const struct srt_stat *, int, const char *, const char *, void *);
+	    const struct srt_stat *, int, const char *, const char *, void *, int);
 
 void	mdslogfill_bmap_repls(struct bmapc_memb *, struct slmds_jent_bmap_repls *);
 void	mdslogfill_ino_repls(struct fidc_membh *, struct slmds_jent_ino_repls *);
@@ -239,6 +239,8 @@
 int	mds_replay_namespace(struct slmds_jent_namespace *, int);
 int	mds_replay_handler(struct psc_journal_enthdr *);
 
+void	mds_write_logentry(uint64_t, uint64_t, uint64_t);
+
 extern struct psc_journal		*slm_journal;
 extern struct psc_journal_cursor	 mds_cursor;
 
Index: slash_nara/slashd/jreplay.c
===================================================================
--- slash_nara/slashd/jreplay.c	(revision 24433)
+++ slash_nara/slashd/jreplay.c	(working copy)
@@ -459,7 +459,7 @@
 		    sjnm->sjnm_target_fid);
 		mdsio_unlink(current_vfsid, mdsio_getfidlinkdir(
 		    sjnm->sjnm_target_fid), NULL, name, &rootcreds,
-		    NULL, NULL);
+		    NULL, NULL, 0);
 
 		break;
 	    case NS_OP_SETSIZE:
Index: slash_nara/slashd/mdsio.h
===================================================================
--- slash_nara/slashd/mdsio.h	(revision 24433)
+++ slash_nara/slashd/mdsio.h	(working copy)
@@ -56,7 +56,7 @@
 
 /* callback to log updates to namespace */
 typedef void (*sl_log_update_t)(int, uint64_t, uint64_t, uint64_t,
-    const struct srt_stat *, int, const char *, const char *, void *);
+    const struct srt_stat *, int, const char *, const char *, void *, int);
 
 /* predefined mdsio layer "fids" */
 #define MDSIO_FID_ROOT		3		/* XXX FUSE_ROOT_ID? */
@@ -114,7 +114,7 @@
 	int	(*mio_statfs)(int, struct statvfs *);
 	int	(*mio_symlink)(int, const char *, mdsio_fid_t, const char *, const struct slash_creds *, struct srt_stat *,
 			mdsio_fid_t *, sl_log_update_t, sl_getslfid_cb_t, slfid_t);
-	int	(*mio_unlink)(int, mdsio_fid_t, struct slash_fidgen *, const char *, const struct slash_creds *, sl_log_update_t, void *);
+	int	(*mio_unlink)(int, mdsio_fid_t, struct slash_fidgen *, const char *, const struct slash_creds *, sl_log_update_t, void *, int);
 	int	(*mio_write)(int, const struct slash_creds *, const void *, size_t, size_t *, off_t, void *,
 			sl_log_write_t, void *);
 
Index: slash_nara/slashd/mdslog.c
===================================================================
--- slash_nara/slashd/mdslog.c	(revision 24433)
+++ slash_nara/slashd/mdslog.c	(working copy)
@@ -287,7 +287,7 @@
 	mds_note_update(1);
 	rc = mdsio_unlink(current_vfsid,
 	    mds_metadir_inum[current_vfsid], NULL, logfn, &rootcreds,
-	    NULL, NULL);
+	    NULL, NULL, 0);
 	mds_note_update(-1);
 
 	if (rc && rc != ENOENT)
@@ -698,7 +698,7 @@
 
 	snprintf(name, sizeof(name), "%016"PRIx64".ino", wk->fid);
 	mdsio_unlink(current_vfsid, mdsio_getfidlinkdir(wk->fid),
-	    NULL, name, &rootcreds, NULL, NULL);
+	    NULL, name, &rootcreds, NULL, NULL, 0);
 	return (0);
 }
 
@@ -710,7 +710,7 @@
 void
 mdslog_namespace(int op, uint64_t txg, uint64_t pfid,
     uint64_t npfid, const struct srt_stat *sstb, int mask,
-    const char *name, const char *newname, void *arg)
+    const char *name, const char *newname, void *arg, int flag)
 {
 	struct slmds_jent_namespace *sjnm;
 	int chg, distill = 0;
@@ -750,7 +750,8 @@
 	 */
 	distill = pjournal_has_peers(slm_journal);
 	if ((op == NS_OP_RECLAIM) ||
-	    (op == NS_OP_UNLINK && sstb->sst_nlink == 1) ||
+	    (op == NS_OP_UNLINK && sstb->sst_nlink == 1 && 
+	    !(flag & SLASH2_KEEP_STORAGE)) ||
 	    (op == NS_OP_SETSIZE && sstb->sst_size == 0)) {
 		/*
 		 * We want to reclaim the space taken by the previous
Index: slash_nara/slashd/rmc.c
===================================================================
--- slash_nara/slashd/rmc.c	(revision 24433)
+++ slash_nara/slashd/rmc.c	(working copy)
@@ -1166,7 +1166,7 @@
 int
 slm_rmc_handle_setattr(struct pscrpc_request *rq)
 {
-	int to_set, tadj = 0, unbump = 0;
+	int to_set, flush, tadj = 0, unbump = 0;
 	struct slashrpc_cservice *csvc;
 	struct fidc_membh *f = NULL;
 	struct srm_setattr_req *mq;
@@ -1186,8 +1186,10 @@
 
 	FCMH_WAIT_BUSY(f);
 
+	flush = mq->to_set & PSCFS_SETATTRF_FLUSH;
 	to_set = mq->to_set & SL_SETATTRF_CLI_ALL;
 
+
 	if (to_set & PSCFS_SETATTRF_DATASIZE) {
 #if 0
 		if (IS_REMOTE_FID(mq->attr.sst_fg.fg_fid)) {
@@ -1214,7 +1216,7 @@
 				fcmh_set_repl_nblks(f, i, 0);
 			to_set |= SL_SETATTRF_GEN | SL_SETATTRF_NBLKS;
 			unbump = 1;
-		} else {
+		} else if (!flush) {
 PFL_GOTOERR(out, mp->rc = -PFLERR_NOTSUP);
 
 			/* partial truncate */
@@ -1247,18 +1249,20 @@
 		}
 	}
 
-	if (tadj & PSCFS_SETATTRF_DATASIZE) {
-		f->fcmh_flags |= FCMH_MDS_IN_PTRUNC;
+	if (!flush) { 
+		if (tadj & PSCFS_SETATTRF_DATASIZE) {
+			f->fcmh_flags |= FCMH_MDS_IN_PTRUNC;
 
-		csvc = slm_getclcsvc(rq->rq_export);
-		if (csvc)
-			psc_dynarray_add(&fcmh_2_fmi(f)->
-			    fmi_ptrunc_clients, csvc);
+			csvc = slm_getclcsvc(rq->rq_export);
+			if (csvc)
+				psc_dynarray_add(&fcmh_2_fmi(f)->
+			    	fmi_ptrunc_clients, csvc);
 
-		mp->rc = -SLERR_BMAP_PTRUNC_STARTED;
+			mp->rc = -SLERR_BMAP_PTRUNC_STARTED;
+		}
+		slm_setattr_core(f, &mq->attr, to_set | tadj);
 	}
 
-	slm_setattr_core(f, &mq->attr, to_set | tadj);
 
  out:
 	if (f) {
@@ -1521,10 +1525,10 @@
 		PFL_GOTOERR(out, mp->rc);
 
 	mds_reserve_slot(1);
-	if (isfile)
+	if (isfile) {
 		mp->rc = mdsio_unlink(vfsid, fcmh_2_mfid(p), &oldfg,
-		    mq->name, &rootcreds, mdslog_namespace, &chfg);
-	else
+		    mq->name, &rootcreds, mdslog_namespace, &chfg, mq->flag);
+	} else
 		mp->rc = mdsio_rmdir(vfsid, fcmh_2_mfid(p), &oldfg,
 		    mq->name, &rootcreds, mdslog_namespace);
 	mds_unreserve_slot(1);
@@ -1553,6 +1557,21 @@
 }
 
 int
+slm_rmc_handle_remove(struct pscrpc_request *rq)
+{
+	struct srm_remove_req *mq;
+	struct srm_remove_rep *mp;
+
+	SL_RSX_ALLOCREP(rq, mq, mp);
+
+	/* make sure the fid does not exist and will not be used */
+
+	mds_write_logentry(0, mq->fg.fg_fid, mq->fg.fg_gen);
+
+	mp->rc = 0;
+	return (0);
+}
+int
 slm_rmc_handle_listxattr(struct pscrpc_request *rq)
 {
 	struct fidc_membh *f = NULL;
@@ -1866,6 +1885,9 @@
 	case SRMT_UNLINK:
 		rc = slm_rmc_handle_unlink(rq, 1);
 		break;
+	case SRMT_REMOVE:
+		rc = slm_rmc_handle_remove(rq);
+		break;
 	case SRMT_LISTXATTR:
 		rc = slm_rmc_handle_listxattr(rq);
 		break;
Index: slash_nara/slashd/rmm.c
===================================================================
--- slash_nara/slashd/rmm.c	(revision 24433)
+++ slash_nara/slashd/rmm.c	(working copy)
@@ -199,7 +199,7 @@
 			break;
 		mp->rc = -mdsio_unlink(vfsid, fcmh_2_mfid(p), NULL,
 		    mq->req.name, &rootcreds, mdslog_namespace,
-		    &mp->attr);
+		    &mp->attr, 0);
 		break;
 	    case SLM_FORWARD_RENAME:
 		mp->rc = slm_fcmh_get(&mq->fg, &op);
Index: pfl/fs.h
===================================================================
--- pfl/fs.h	(revision 24433)
+++ pfl/fs.h	(working copy)
@@ -162,7 +162,8 @@
 #define	PSCFS_SETATTRF_CTIME		(1 <<  6)	/* utimes */
 #define	PSCFS_SETATTRF_ATIME_NOW	(1 <<  7)	/* utimes */
 #define	PSCFS_SETATTRF_MTIME_NOW	(1 <<  8)	/* utimes */
-#define	_PSCFS_SETATTRF_LAST		(1 <<  9)
+#define	PSCFS_SETATTRF_FLUSH		(1 <<  9)	/* flush dirty attributes */
+#define	_PSCFS_SETATTRF_LAST		(1 <<  10)
 
 #define PSCFS_SETATTRF_ALL		(~0)
 
Index: slash_nara/include/slashrpc.h
===================================================================
--- slash_nara/include/slashrpc.h	(revision 24433)
+++ slash_nara/include/slashrpc.h	(working copy)
@@ -175,19 +175,20 @@
 	SRMT_STATFS,				/* 39: statvfs(2) */
 	SRMT_SYMLINK,				/* 40: symlink(2) */
 	SRMT_UNLINK,				/* 41: unlink(2) */
-	SRMT_WRITE,				/* 42: write(2) */
-	SRMT_LISTXATTR,				/* 43: listxattr(2) */
-	SRMT_SETXATTR,				/* 44: setxattr(2) */
-	SRMT_GETXATTR,				/* 45: getxattr(2) */
-	SRMT_REMOVEXATTR,			/* 46: removexattr(2) */
+	SRMT_REMOVE,				/* 42: unlink(2) afermath */
+	SRMT_WRITE,				/* 43: write(2) */
+	SRMT_LISTXATTR,				/* 44: listxattr(2) */
+	SRMT_SETXATTR,				/* 45: setxattr(2) */
+	SRMT_GETXATTR,				/* 46: getxattr(2) */
+	SRMT_REMOVEXATTR,			/* 47: removexattr(2) */
 
 	/* import/export */
-	SRMT_IMPORT,				/* 47: import */
+	SRMT_IMPORT,				/* 48: import */
 
-	SRMT_PRECLAIM,				/* 48: partial file reclaim */
-	SRMT_BATCH_RQ,				/* 49: async batch request */
-	SRMT_BATCH_RP,				/* 50: async batch reply */
-	SRMT_CTL				/* 51: generic control */
+	SRMT_PRECLAIM,				/* 49: partial file reclaim */
+	SRMT_BATCH_RQ,				/* 50: async batch request */
+	SRMT_BATCH_RP,				/* 51: async batch reply */
+	SRMT_CTL				/* 52: generic control */
 };
 
 /* ----------------------------- BEGIN MESSAGES ----------------------------- */
@@ -992,6 +993,7 @@
 struct srm_unlink_req {
 	slfid_t			pfid;		/* parent dir */
 	char			name[SL_NAME_MAX + 1];
+	int			flag;		/* 0: normal, 1: name only */
 } __packed;
 
 struct srm_unlink_rep {
@@ -1001,6 +1003,15 @@
 	 int32_t		rc;
 } __packed;
 
+struct srm_remove_req {
+	struct slash_fidgen	fg;		/* file to remove */
+} __packed;
+
+struct srm_remove_rep {
+	 int32_t		rc;
+	 int32_t		_pad;
+} __packed;
+
 struct srm_listxattr_req {
 	struct slash_fidgen	fg;
 	uint32_t		size;
Index: slash_nara/mount_slash/fidc_cli.h
===================================================================
--- slash_nara/mount_slash/fidc_cli.h	(revision 24433)
+++ slash_nara/mount_slash/fidc_cli.h	(working copy)
@@ -90,6 +90,8 @@
 	sl_bmapno_t			 fci_bmapno;
 	uint32_t			 fci_raoff;
 	int			 	 fci_rapages;
+
+	int				 fci_opencnt;
 };
 
 #define fcmh_2_nrepls(f)	fcmh_2_fci(f)->fci_inode.nrepls
Index: slash_nara/mount_slash/main.c
===================================================================
--- slash_nara/mount_slash/main.c	(revision 24433)
+++ slash_nara/mount_slash/main.c	(working copy)
@@ -1171,7 +1171,9 @@
 	struct srm_unlink_req *mq;
 	struct srm_unlink_rep *mp;
 	struct pscfs_creds pcr;
-	int rc;
+	struct srt_stat sstb;
+	int rc, nameonly = 0;
+	struct fcmh_cli_info *fci;
 
 	msfsthr_ensure(pfr);
 
@@ -1189,29 +1191,34 @@
 
 	pscfs_getcreds(pfr, &pcr);
 
+	rc = msl_lookup_fidcache(pfr, &pcr, pinum, name,
+	    NULL, &sstb, NULL);
+	if (rc)
+		PFL_GOTOERR(out, rc);
+
 	FCMH_LOCK(p);
 	if ((p->fcmh_sstb.sst_mode & S_ISVTX) && pcr.pcr_uid) {
 		if (p->fcmh_sstb.sst_uid != pcr.pcr_uid) {
-			struct srt_stat sstb;
-
-			FCMH_ULOCK(p);
-
-			rc = msl_lookup_fidcache(pfr, &pcr, pinum, name,
-			    NULL, &sstb, NULL);
-			if (rc)
-				PFL_GOTOERR(out, rc);
-
 			if (sstb.sst_uid != pcr.pcr_uid)
 				rc = EPERM;
-		} else
-			FCMH_ULOCK(p);
+		}
 	} else {
 		rc = fcmh_checkcreds(p, &pcr, W_OK);
-		FCMH_ULOCK(p);
 	}
+	FCMH_ULOCK(p);
 	if (rc)
 		PFL_GOTOERR(out, rc);
 
+	if (isfile && !msl_peek_fcmh(pfr, sstb.sst_fid, &c)) {
+		FCMH_LOCK(c);
+		fci = fcmh_2_fci(c);
+		if (fci->fci_opencnt) {
+			c->fcmh_flags |= FCMH_DELETED;
+			nameonly = 1;
+			OPSTAT_INCR(SLC_OPST_DELETE_MARKED);
+		}
+	}
+
  retry:
 	MSL_RMC_NEWREQ(pfr, p, csvc, isfile ? SRMT_UNLINK : SRMT_RMDIR,
 	    rq, mq, mp, rc);
@@ -1219,6 +1226,7 @@
 		PFL_GOTOERR(out, rc);
 
 	mq->pfid = pinum;
+	mq->flag = nameonly;
 	strlcpy(mq->name, name, sizeof(mq->name));
 
 	rc = SL_RSX_WAITREP(csvc, rq, mp);
@@ -1230,29 +1238,13 @@
 		rc = mp->rc;
 
 	if (!rc) {
-		int tmprc;
-
 		FCMH_LOCK(p);
 		uidmap_int_stat(&mp->pattr);
 		slc_fcmh_setattr_locked(p, &mp->pattr);
 		FCMH_ULOCK(p);
-
-		tmprc = msl_peek_fcmh(pfr, mp->cattr.sst_fid, &c);
-		if (!tmprc) {
-			if (mp->valid) {
-				uidmap_int_stat(&mp->cattr);
-				slc_fcmh_setattrf(c, &mp->cattr,
-				    FCMH_SETATTRF_SAVELOCAL);
-			} else {
-				FCMH_LOCK(c);
-				c->fcmh_flags |= FCMH_DELETED;
-				OPSTAT_INCR(SLC_OPST_DELETE_MARKED);
-			}
-		} else
-			OPSTAT_INCR(SLC_OPST_DELETE_SKIPPED);
 	}
 
-	psclog_diag("delete: fid="SLPRI_FG" valid = %d name='%s' isfile=%d rc=%d",
+	psclog_warn("delete: fid="SLPRI_FG" valid = %d name='%s' isfile=%d rc=%d",
 	    SLPRI_FG_ARGS(&mp->cattr.sst_fg), mp->valid, name, isfile, rc);
 
  out:
@@ -1749,16 +1741,13 @@
  * Note that this function is called (at least) once for each open.
  */
 __static int
-msl_flush_int_locked(struct msl_fhent *mfh, int wait)
+msl_flush_int_locked(struct fidc_membh *f, int wait)
 {
-	struct fidc_membh *f;
 	struct bmapc_memb *b;
 	int i, rc = 0;
 	struct psc_dynarray a = DYNARRAY_INIT;
 	struct bmap_cli_info *bci;
 
-	f = mfh->mfh_fcmh;
-
 	FCMH_LOCK(f);
 	SPLAY_FOREACH(b, bmap_cache, &f->fcmh_bmaptree) {
 		BMAP_LOCK(b);
@@ -1797,7 +1786,7 @@
 	DEBUG_FCMH(PLL_DIAG, mfh->mfh_fcmh, "flushing (mfh=%p)", mfh);
 
 	spinlock(&mfh->mfh_lock);
-	rc = msl_flush_int_locked(mfh, 0);
+	rc = msl_flush_int_locked(mfh->mfh_fcmh, 0);
 	freelock(&mfh->mfh_lock);
 
 	DEBUG_FCMH(PLL_DIAG, mfh->mfh_fcmh,
@@ -1848,7 +1837,12 @@
 	mq->attr.sst_mtim = f->fcmh_sstb.sst_mtim;
 	FCMH_ULOCK(f);
 
-	mq->to_set = PSCFS_SETATTRF_MTIME |
+#if 0
+	psclog_warn("fid: "SLPRI_FID", size change "
+	    "to %"PRId64, fcmh_2_fid(f), f->fcmh_sstb.sst_size);
+#endif
+
+	mq->to_set = PSCFS_SETATTRF_MTIME | PSCFS_SETATTRF_FLUSH |
 	    PSCFS_SETATTRF_DATASIZE;
 
 	rc = SL_RSX_WAITREP(csvc, rq, mp);
@@ -1913,18 +1907,24 @@
 	struct msl_fhent *mfh = data;
 	struct fcmh_cli_info *fci;
 	struct fidc_membh *c;
-	int rc = 0, flush_attrs = 0;
+	int rc = 0, tmprc = 0, flush_attrs = 0;
 
+	struct pscrpc_request *rq = NULL;
+	struct srm_remove_req *mq;
+	struct srm_remove_rep *mp;
+	struct slashrpc_cservice *csvc = NULL;
+
 	msfsthr_ensure(pfr);
 
 	OPSTAT_INCR(SLC_OPST_CLOSE);
 
 	c = mfh->mfh_fcmh;
+	DEBUG_FCMH(PLL_WARN, c, "close file");
 
 	MFH_LOCK(mfh);
 	mfh->mfh_flags |= MSL_FHENT_CLOSING;
 
-	rc = msl_flush_int_locked(mfh, 1);
+	rc = msl_flush_int_locked(c, 1);
 
 	/*
 	 * Perhaps this checking should only be done on the mfh, with
@@ -1944,6 +1944,7 @@
 		fcmh_wake_locked(c);
 		if (rc) {
 			c->fcmh_flags |= FCMH_CLI_DIRTY_ATTRS;
+			FCMH_ULOCK(c);
 		} else if (!(c->fcmh_flags & FCMH_CLI_DIRTY_ATTRS)) {
 			psc_assert(c->fcmh_flags & FCMH_CLI_DIRTY_QUEUE);
 			c->fcmh_flags &= ~FCMH_CLI_DIRTY_QUEUE;
@@ -1974,11 +1975,32 @@
 		    PSCPRI_TIMESPEC_ARGS(&mfh->mfh_open_time),
 		    mfh->mfh_nbytes_rd, mfh->mfh_nbytes_wr, fn);
 	}
+	FCMH_LOCK(c);
+	fci = fcmh_2_fci(c);
+	fci->fci_opencnt--;
+	if ((c->fcmh_flags & FCMH_DELETED) && !fci->fci_opencnt) {
+		FCMH_ULOCK(c);
+		MSL_RMC_NEWREQ(pfr, p, csvc, SRMT_REMOVE, rq, mq, mp, tmprc);
+		if (tmprc)
+			goto out;
+		mq->fg = c->fcmh_fg;
+		tmprc = SL_RSX_WAITREP(csvc, rq, mp);
+	} else
+		FCMH_ULOCK(c);
 
+ out:
+	if (tmprc)
+		psclog(PLL_WARN, "Storage leak: fid = "SLPRI_FID, fcmh_2_fid(c));
+
 	pscfs_reply_close(pfr, rc);
 
 	FCMH_UNBUSY(c);
 	mfh_decref(mfh);
+
+	if (rq)
+		pscrpc_req_finished(rq);
+	if (csvc)
+		sl_csvc_decref(csvc);
 }
 
 void
@@ -2560,6 +2582,7 @@
 	/* No need to do this on retry. */
 	if (c->fcmh_flags & FCMH_CLI_DIRTY_ATTRS) {
 		flush_attrs = 1;
+		to_set |= PSCFS_SETATTRF_FLUSH;
 		if (!(to_set & PSCFS_SETATTRF_MTIME)) {
 			to_set |= PSCFS_SETATTRF_MTIME;
 			PFL_STB_MTIME_SET(c->fcmh_sstb.sst_mtime,
@@ -2629,8 +2652,8 @@
 	}
 
 	if (to_set & PSCFS_SETATTRF_DATASIZE) {
-		if (c->fcmh_sstb.sst_size != mp->attr.sst_size)
-			psclog_info("fid: "SLPRI_FID", size change "
+	//	if (c->fcmh_sstb.sst_size != mp->attr.sst_size)
+			psclog_warn("fid: "SLPRI_FID", size change "
 			    "from %"PRId64" to %"PRId64,
 			    fcmh_2_fid(c), c->fcmh_sstb.sst_size,
 			    mp->attr.sst_size);
@@ -2708,7 +2731,7 @@
 	DEBUG_FCMH(PLL_DIAG, mfh->mfh_fcmh, "fsyncing via flush");
 
 	spinlock(&mfh->mfh_lock);
-	rc = msl_flush_int_locked(mfh, 1);
+	rc = msl_flush_int_locked(mfh->mfh_fcmh, 1);
 	freelock(&mfh->mfh_lock);
 
 	pscfs_reply_fsync(pfr, rc);
@@ -2737,6 +2760,9 @@
 
 	f = mfh->mfh_fcmh;
 
+	DEBUG_FCMH(PLL_WARN, f, "write (start): buf=%p sz=%zu "
+	    "off=%"PSCPRIdOFFT, buf, size, off);
+
 	/* XXX EBADF if fd is not open for writing */
 	if (fcmh_isdir(f))
 		PFL_GOTOERR(out, rc = EISDIR);
@@ -2768,7 +2794,7 @@
 
 	f = mfh->mfh_fcmh;
 
-	DEBUG_FCMH(PLL_DIAG, f, "read (start): buf=%p rc=%d sz=%zu "
+	DEBUG_FCMH(PLL_WARN, f, "read (start): buf=%p rc=%d sz=%zu "
 	    "len=%zd off=%"PSCPRIdOFFT, buf, rc, size, len, off);
 
 	if (fcmh_isdir(f)) {
@@ -3164,6 +3190,10 @@
 				FCMH_ULOCK(f);
 				continue;
 			}
+			if (f->fcmh_flags & FCMH_DELETED) {
+				FCMH_ULOCK(f);
+				continue;
+			}
 			psc_assert(f->fcmh_flags & FCMH_CLI_DIRTY_ATTRS);
 
 			if (fci->fci_etime.tv_sec > ts.tv_sec ||
Index: slash_nara/mount_slash/mount_slash_int.c
===================================================================
--- slash_nara/mount_slash/mount_slash_int.c	(revision 24433)
+++ slash_nara/mount_slash/mount_slash_int.c	(working copy)
@@ -413,7 +413,10 @@
 msl_fhent_new(struct pscfs_req *pfr, struct fidc_membh *f)
 {
 	struct msl_fhent *mfh;
+	struct fcmh_cli_info *fci;
 
+	fci = fcmh_2_fci(f);
+	fci->fci_opencnt++;
 	fcmh_op_start_type(f, FCMH_OPCNT_OPEN);
 
 	mfh = psc_pool_get(slc_mfh_pool);
Index: slash_nara/share/fidc_common.c
===================================================================
--- slash_nara/share/fidc_common.c	(revision 24433)
+++ slash_nara/share/fidc_common.c	(working copy)
@@ -396,7 +396,7 @@
 	psc_assert(f->fcmh_refcnt >= 0);
 	f->fcmh_refcnt++;
 
-	DEBUG_FCMH(PLL_DEBUG, f, "took ref (type=%d)", type);
+	DEBUG_FCMH(PLL_WARN, f, "took ref (type=%d)", type);
 
 	/*
 	 * Only 2 types of references may be long standing,
@@ -422,7 +422,7 @@
 	(void)FCMH_RLOCK(f);
 	rc = f->fcmh_refcnt--;
 	psc_assert(rc > 0);
-	DEBUG_FCMH(PLL_DEBUG, f, "release ref (type=%d)", type);
+	DEBUG_FCMH(PLL_WARN, f, "release ref (type=%d)", type);
 	if (rc == 1) {
 		psc_assert(!FCMH_HAS_BUSY(f));
 
