#!/usr/bin/perl -W
# $Id: t1 8464 2009-10-19 22:48:46Z yanovich $

sub zest_conf {
	my %h = @_;

	return <<'EOF';
global port=1001;
global net=tcp10;
global keyfn=/home/jy.slkey;

site @PSC {
	site_desc	= "PSC";
	site_id		= 100;

	resource md {
		desc	= "adamantium metadata";
		type	= mds;
		id	= 101;
		ifs	= adamantium.psc.edu;
	}

	resource io {
		desc	= "stryker fast I/O";
		type	= parallel_fs;
		id	= 102;
		fsroot	= /slio-jy;
		ifs	= stryker.psc.edu;
	}

	resource archiver {
		desc	= "wolverine archiver";
		type	= archival_fs;
		id	= 103;
		fsroot	= /slio-jy;
		ifs	= wolverine.psc.edu;
	}

	resource gf {
		desc	= "grapefruit";
		type	= archival_fs;
		id	= 104;
		fsroot	= /local/slio-jy;
		ifs	= grapefruit.psc.edu;
	}
}
EOF
}

sub cli_cmd {
	my %h = @_;

	return <<ENDCMD;
cd $h{src}/fio
make pthreads >/dev/null

perl - \$1 <<'EOS'
use IPC::Open2;
use strict;
use warnings;

my \$clienthost = \$ARGV[0];
my \$fiolog = "$h{base}/fiolog.\$clienthost";
mkdir \$fiolog or die "mkdir \$fiolog: \$clienthost\\n";

sub runfio {
	my (\$name, \$to, \$in) = \@_;

	print STDERR "running test \$name\\n";

	\$in =~ s/%NAME%/\$name/g;
	my \$conf = "\$fiolog/\$name.\$clienthost.fio";
	open CONF, ">", \$conf or die "\$conf: \$!\\n";
	print CONF \$in;
	close CONF;

	my \$start = time;
	system "perl $h{gdbtry} ./fio.pthreads -i \$conf";
	exit \$? if \$?;
	my \$diff = time - \$start;

	print STDERR "sleeping to wait for syncing before next test\\n";

	# XXX: add sync wait step
	# XXX: add verify step
	sleep \$to; # XXX: until zsyncmgt wait manually for syncing

	return "\$name \$diff\\n";
}

my \@res;
push \@res, runfio("fio16t16x.2G", 15, <<EOF);
group MyReadWrite {
	files_per_dir	= 16;
	tree_depth	= 0;
	tree_width	= 0;
	pes		= 16;
	test_freq	= 0;
	block_freq	= 0;
	path		= "$h{fspath}/%NAME%.\$clienthost";
	output_path	= "\$fiolog";
	filename	= %NAME%;
	file_size	= 200m;
	block_size	= 128k;
	thrash_lock	= yes;
	samedir		= yes;
	samefile	= no;
	intersperse	= no;
	seekoff		= no;
	fsync_block	= no;
	verify		= yes;
	barrier		= yes;
	time_block	= no;
	block_barrier	= no;
	time_barrier	= no;
	iterations	= 1;
	debug_conf	= no;
	debug_block	= no;
	debug_memory	= no;
	debug_buffer	= no;
	debug_output	= no;
	debug_dtree	= no;
	debug_barrier	= no;
	debug_iofunc	= no;
	iotests (
		WriteEmUp	[openwr:write:close]
	)
}
EOF

my \$infh;
open2(">&STDOUT", \$infh, "$h{doresults}");
print \$infh \@res;
close \$infh;
wait;

print "test completed\\n";

sleep 1200;

EOS

ENDCMD
}

our $logbase= "/home/slog";
our $rootdir = "/tmp/slog";
our $svnroot = 'svn+ssh://frodo/cluster/svn/projects';
our $intvtimeout = 60*7;	# single op interval timeout
our $runtimeout = 60*60*8;	# client run duration
our $src = "/home/yanovich/code/advsys/p4";

our @msl = (
	{
		addr => "adamantium",
		env => {
			PSC_LOG_LEVEL => 2,
			LNET_NETWORKS => "tcp9(eth0)",
			SLASH_MDS_NID => "mds0",
			SLASH2_PIOS_ID => "io0"
		}
	},
);

my $localcfg = __FILE__ . ".local";
require $localcfg if -e $localcfg;

1;
