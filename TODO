$Id$

reminders:
- be consistent with I/O software terminology
	(o) ion - an I/O node (resm)
	(o) ios - an I/O system (res)
	(o) iod - the sliod daemon
- do sl_csvc_wantfree() in all to-CLI csvcs
- ensure reentrancy of 'static' variables in functions

-----------------------------------------------------------------------
* Support for st_nblocks for applications such as 'du -h'.
Initial thoughts are that this value should be stored in the zfs inode.
Currently we have a 4 byte pad which could be employed if we were to use
a 1MB block.  A 1MB is the simplest unit for us to use but will result
in entirely bogus results for trees with lots of small files. I'm not
sure if there is a way around this problem - people will just have to
use big files :)

Using the slash2 inode here is not totally out of the question but lookups
of the nblocks value will be much slower.

The MDS will need to note whether or not the CRC has ever been written, if
not then the nblocks count will be incremented by 1.  Also journaling
implications will need to be considered since this value will need to be
kept relatively accurate.  Further, for MDS replication, this value will need
to be recorded in the changelog.

Zhihui asks "should we include replicas in the block count?".  I'm on the
fence about this.

 - there should be a slictl/msctl cmd to see this info:

	(o) msctl -s diskusage:file[,...]

pauln (11/10/2010)

-----------------------------------------------------------------------
TRUNCATE
* More about truncate, unlink GC.

Unlinked inodes which contain bmaps we should link the fid file into a GC
directory.  From here we can scan the bmaps and issue GC requests to the
appropriate IOS's.   If we implement a 2nd generation #, managed by slash2,
we would use fmt fid_zfs-gen_slash2-gen in the C directory.

* Thinking about truncate.. in the event of an O_TRUNC or truncate() syscall we
should not invalidate replicas but rather queue truncate or reclamation requests
for the affected storage backend systems and perform the appropriate truncate
on the metafile.  Somehow the truncate queue must be persistent on the mds.
Additionally, a sliver's worth of data may need to be checksummed.

Other garbage collection requests must be handled in a similar fashion.  For
instance an 'rm' operation must record the fid+gen pair and queue a garbage
collection request.  For this the replica IOS's should be read from the inode
and used to generate the requests.  This type of GC should be easy due to ZFS's
use fo fid+gen pairs.

Truncate is more of a problem because the fid+gen remains, thus making async IOS
truncate operations problematic because new writes may come from the client before
the truncate is processed by the IOS (whoops!).  Client to IOS truncate ops are
also unfavorable because replica maintenance may need to be done, the client may have
the replica table but should he be the one directing the truncates to all IOS's?
I'm inclined to say 'no'.  Care must be taken here so that we don't hurt performance
for (O_CREAT|O_TRUNC) of existing files which is the case where the fid+gen is not
changed.  As an optimization we could possibly delete the file on the mds first,
invoking the GC routines for that fid+gen and then create a new inode.  Of course
this may break semantics for some apps which assume the same inode # to be used.

* Truncate Implementation
  Non O_TRUNC but otherwise aligned trunc operations should be fairly simple to implement.
  Here two things are required:
	 1. Zero out the bmap descriptors within the metafile.
	 2. Record the reclaimable regions so the the IONs may also reclaim that space.

  The question is, how do we deal with unaligned truncates?  We need some way to denote that
  the bmap crc is no longer valid.  Actually such a construct is probably needed in other places
  as well.  On truncate, the value of ino_lblk needs to be reset as does ino_lblk_sz.

-----------------------------------------------------------------------

1/14/10
* Deal with problems surrounding full odtable. ATM odtable put errors are not dealt with properly
leading to problems later in cfdfree where the bmap refcnt is wrong.

11/23/09
* mds_bmap_ion_assign fails when the caller doesn't specify a PIOS.

11/02/09
* msl_io and rpc ION calls need to return actual size so that read() can
be short circuited on EOF.

09/23/09
* Sliod has too many open files but reports success anyway to mount_slash.

* Sliod runs out of space in filesystem and returns from an rpc early (client sees the rc -28)
	the problem is that other sliod threads are blocked on a waitq and are never woken
	up.  Need a way to deal with the failure mode.

* While running a small file / create intensive fio test, I find that most of the threads
are blocking here waiting for rpc completion.  This makes things like 'ls -al' very slow
because no threads are left to process incoming operations.
Thread 4 (Thread 0x50fa7940 (LWP 31008)):
#0  0x000000331c20a899 in pthread_cond_wait@@GLIBC_2.3.2 ()
#1  0x00000000004748a9 in psc_waitq_waitrel ()
#2  0x0000000000423d2b in bmap_oftrq_waitempty ()
#3  0x0000000000424151 in msl_bmap_tryrelease ()
#4  0x000000000042425d in msl_fbr_free ()
#5  0x0000000000424f4d in msl_bmap_fhcache_clear ()
#6  0x000000000041b62c in slash2fuse_release ()
#7  0x00002b93b5a6c7c3 in do_release () from /usr/local/lib/libfuse.so.2
#8  0x000000000040f302 in slash2fuse_listener_loop ()
#9  0x000000331c206367 in start_thread () from /lib64/libpthread.so.0
#10 0x000000331bad309d in clone () from /lib64/libc.so.6

Actually, if all of the operations performed in slash2fuse_release could be done
asynchronously then performance would be greatly improved.
- this should be safe too, as FUSE guarentees to call flush() before release().
  however, perhaps the problem is that flush().

Well, after increasing the number of fuse threads to 48 I don't see the entire set blocked
in release but I don't see good performance for 'ls -al'.

* Namespace Disconnection Problem
  The namespace must be protected from a rename operation where a parent directory
  is renamed into one of its children.  Supposedly a global rename lock is used in
  today's filesystems which locks the entire namespace and analyzes the paths to ensure
  that a rename source is not a parent of the target.  I think this is not a problem
  using directory hardlinks since the source's children may be determined via the immns
  dir hardlink.  EEB seems to think otherwise..  I think the issue is where the ".." directory
  of the destination points.  If it points to the immns then we're in trouble.

  rule: when looking up the destination name, if any component FIDs match the source parent,
    return EINVAL.  this should be handled under the hood by FUSE.

* Fidcache Generation Numbering
	Fidcache must support generation numbers.
		. hash table code should be modified to add a cmp function.
		. ambiguous inode lookups should prefer the highest gen #

	On the fidcache generation # subject.  Implementing the FC with gen #'s is
	awkward because fuse does not provide the generation number except when it
	provides an 'fi'.  This means that the gen cannot be used for hash table lookups
	taking place on behalf of operations like: create, mkdir, open,	etc.

	Done but seeing a problem on the client when doing stress testing:
	[1233201864:695906 msfsthr9:__fidc_lookup_fg:320] [assert] fcmh_2_gen(tmp) != FID_ANY

	Not seeing the above on the server..

- ensure fidc doesn't look up beyond SYM_NLOOPS #loops
- add some high-level aliases to the replication interface for users:

  mid-level persistence control aliases:
    $ slfctl [-R] -p file ...				# msctl -f new-repl-policy=persist
    $ slfctl [-R] -o file ...				# msctl -f new-repl-policy=onetime
    $ slfctl -B bmapspec:file ...			# msctl -f bmap-repl-policy=persist
    $ slfctl -b bmapspec:file ...			# msctl -f bmap-repl-policy=onetime

  mid-level replication request control aliases:
    $ slfs replstatus [-R] file ...			# msctl [-R] -r file -r...
    $ slfs replqueue [-R] res[,...]:bmapspec:file ...	# msctl [-R] -Q spec -Q...
    $ slfs replremove [-R] res[,...]:bmapspec:file ...	# msctl [-R] -U spec -U...

  high-level aliases:
    $ slfs replicate [-Rp] res[,...] file ...
	if (-p)
		slfctl [-R] -p file ...
	msctl [-R] -Q res,...|*[P]:file ...
    $ slfs replcancel|cancel [res,...] file ...
	if (-p)
		slfctl [-R] -o file ...
	msctl [-R] -U res,...|*[P]:file ...
    $ slfs setpersist file ...
	slfctl -p file ...
	slfctl -B *:file *:...
    $ slfs setonetime file ...
	slfctl -o file ...
	slfctl -b *:file *:...

----------------------------------------------------------------------

- slimmns does more than create the immutable namespace, and should
  be more intuitively named for formatting MDS file systems, such as
  slmkfs, slfmtfs, or slnewfs
- libsl_init() is getting an ENOMEM somewhere in slashd, maybe LNET
----------------------------------------------------
- removing the persistence policy on a bmap should mds_repl_delrq()
  for that bmap
- merge set_bmapreplpol and friends into a single slfattr interface
- push O_APPEND writes always to EOF instead of the the client-sent offset

- add ctl knobs for changing preferred IOS
- allow multiple preferred IOS servers

- create a separate dir, .slrepls and keep the fids here.  maintain a
  maximum number of entries at any time in memory from this dir

- add msctl -s bmpc

---------------------------------------------------------

sliod import
- slictl -m path
    lookup path

    approaches:
    (o) link into slfidns, calculate and transmit CRCS,
	delete link from user path.
    (o) link into slfidns, calculate and transmit CRCs,
	wait for CRC failure and auto deject.
    (o) link into slfidns, flag slivers to ignore CRCs,
	always allow access.

sliod export
- slictl -x path
    lookup path FID and move file to destination
    if recursive, lookup recursively

---------------------------------------------------------

network scheduling
- need slash.conf rules to specify link bandwidth
- preferentiate users
    (o) need classes, always complete a class before moving
	to next one, files in the same class have same fairness
- add network topology descriptions to slash.conf

netsched/libnetsch - universal interface
- LD_PRELOAD?
- intercept for recompiling
- API
- needs to communicate with other nodes about traffic situation

tracks endpoint connections
- if new ones are made that utilize the same link, manage and
  limit and wait until bandwidth is available

- per-site network upscheduling is not enough; it has to be per link to
  maintain network link saturation effectively

- must consider multiple interfaces

MDS must do this for scheduling traffic between sliods

------------------------------

- add SSL transport for anytime cleartext is untrusted
- convert authbuf to pki, put hash back inside bdbuf fdbuf
  reasoning: if authbuf succeeded, we trust anything, so there is no
  point in having extra provisions such as src ION

  consequence: kill authbuf
- sprinkle some iostats on zfs, namespace changelog
- add journal I/O test mode to slashd
- tie zfslog to psclog

---------------

- failure of connections
    (o) have mount_slash provide the option of waiting or immediately
	returning EIO
    (o) write messages to stderr of the process trying to do I/O when
	the connections are down

- add throttling and ping channel control to slash

utime
    (o)	track how long sliod has held the I/O and send the difference to
	the MDS so the MDS can more accurately estimate when the I/O
	took place

tree
- rename include/buffer.h and share/buffer.c as sliod/slab.h sliod/slab.c
- move inode.h into slashd
- rename the zfs_init() alias, it is already a routine in ZFS
- rename slconfig.h to slcfg.h to disambiguate slco prefix

API rename
- rename FCMH_CREATE to POPULATE
- mdsio_fid_t -> mdsio_inum_t

- upsch items are not getting removed on completion
- ensure PINGs only happen every 30 seconds
- CREATE with mode 0755 doesnt work (check umask?)
- GETATTR should never return nlinks=0
- replace FCMH_CTOR_FAILED with fmi_ctor_rc
- slimmns -W should instead should rename the top-level its contents in
  the (forked) background after returning quickly to admin
  . not sure about the removal step.  Why not make use of a UUID that's
  generated by the MDS and provided as a parameter to the sliod slimmns
  operation?  So we'd have something like:  /s2io/{UUID}/.slimmns
  The UUID could be just a timestamp too.  This would allow admins to
  remove old backing directories at their convenience while not
  compromising data integrity.

- change upsched to do async callbacks
- does upsched get hung up by huge recursive repl reqs ?

- if the target ptrunc offset falls inside a bmap, do more stuff:
    (o) mark the CRC for this bmap as unknown (we don't do this)

- use pfl_memchk instead of null inode structures for memcmp
- SRMT_GETBMAPMINSEQ is not handled by slashd
- CRCs are currently ignored in the I/O path
- need a way to view a directory's newbmap_repl_policy
    (o) maybe in msctl -r view, so we can see which MDS a dir is
	centralized with
- need a general mechanism to pass data between msctl/slictl/slmctl
  so we get all the functionality everywhere and don't have to copy huge
  chunks of code
- slmctl -s peertraffic -s replrqs -s diskusage
- initialize new file repl table from parent dir to help with
  persistence policies
	- or just tell users to msctl -R everytime...
- ensure all errno values in rpc msgs are standardized
- convert CONF_LOCK to a rwlock
- we can't hold fcmh in memory at all times just because PTRUNC has to
  be resolved.  have to store in inode and release fcmh.  we pass the
  fid to the ptrunc worker and when it processes it loads the fcmh.
- have slashd umount /zfs-kstat on teardown
- disable RENAME and other ops are files in SL_RPATH_META_DIR (e.g. mv .slfidns .blah)
- ensure attrs are loaded before CHECKCREDS() -- perhaps memcmp() against zeroes?
- clean up metadata (and replica garbage) for any files clobbered by RENAME, LINK
- add a generic SRMT_BMAPCTL that bunches up ops such as WAKE, RELEASE,
  DIO, etc.
- do full truncate and unlink do the right things while ptrunc is resolving?
- add SSL transport which uses keys and can therefore disable authbuf
- slmctl -s clients do not seem to go away

- write a ptrunc tester
- for -s connections, we arguably do not need to show members of the
  same resource we are part of since we will never connect to them
- patch fuse.ko since fuse_notify_entry_inval() causes segfault
- add zfs SPA version to slashd ctlparam
- add msl local I/O cache support
- use umount -l if it is supported at teardown
- client needs to track when MDS goes down and recheck pinned
  ptrunc bmaps for resolvement
- on MDS resm failure inside msl, clear a bit on all fcmh's pinned by ptrunc
  whenever we check this flag, if the bit is not set, issue an RPC so
  that we get registered with the MDS to be notified when ptrunc resolves

- pjd tests used to fail due to inability to send FUSE updates to its
  cache after UNLINK, RENAME operations?

	link/00.t	18-19, 22, 44-45, 48
	rename/00.t	49, 53, 57, 61
	unlink/00.t	17, 22, 53

========================================================= KNOWN CAVEATS
- sljournal constraint on small file names (1023-byte symlink must fit
  in SLJ_NAMES_MAX):

- FUSE bug: during LOOKUP, there is no check for invalidated dirs to
  re-force lookups for child nodes.

  if this gets resolves, we should remove the code that explicitly
  invalidates FUSE child dentries of a directory when handling CHMOD
